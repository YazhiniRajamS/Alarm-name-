package com.example.demo.service;

import org.springframework.stereotype.Service;

import java.io.*;
import java.nio.file.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.*;

@Service
public class AlarmIdGeneratorService {

    private static final String INPUT_FILE_PATH = "/home/test/Downloads/File-fault/alarm_reply.xml";

    public Map<String, String> generateFile(String outputDir) {
        List<String> alarmIds = new ArrayList<>();
        String content;

        try {
            content = Files.readString(Paths.get(INPUT_FILE_PATH));

            // Regex to find both <id> and <td> containing UUIDs
            Pattern idPattern = Pattern.compile("<(?:id|td)\\s*>\\s*([a-f0-9\\-]{36})\\s*</(?:id|td)>", Pattern.CASE_INSENSITIVE);
            Matcher matcher = idPattern.matcher(content);

            while (matcher.find()) {
                alarmIds.add(matcher.group(1));
            }

            // Generate timestamp
            String timestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
            String filenameTimestamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());

            // Create XML content
            StringBuilder xml = new StringBuilder();
            xml.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
            xml.append("<alarms timestamp=\"").append(timestamp).append("\">\n");
            for (String id : alarmIds) {
                xml.append("  <alarm><id>").append(id).append("</id></alarm>\n");
            }
            xml.append("</alarms>");

            // Write to file
            String fileName = "alarm_" + filenameTimestamp + ".xml";
            Path filePath = Paths.get(outputDir, fileName);
            Files.createDirectories(filePath.getParent());
            Files.writeString(filePath, xml.toString());

            // Return JSON response
            Map<String, String> result = new HashMap<>();
            result.put("filePath", filePath.toString());
            return result;

        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException("Failed to generate alarm file: " + e.getMessage());
        }
    }
}
