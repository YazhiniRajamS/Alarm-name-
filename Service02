package com.example.alarmgenerator;

import org.springframework.stereotype.Service;
import java.io.IOException;
import java.nio.file.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.regex.*;

@Service
public class AlarmService {

    private static final String INPUT_PATH = "/home/test/Downloads/File-fault/alarm_reply.xml";
    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    private static final DateTimeFormatter FILE_FORMATTER = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss");

    public Map<String, Object> generateAlarmIdFile(String outputDir) throws IOException {
        String content = Files.readString(Paths.get(INPUT_PATH));

        List<String> alarmIds = new ArrayList<>();
        Pattern idPattern = Pattern.compile("<(?:id|td)>(\\d+)</(?:id|td)>", Pattern.CASE_INSENSITIVE);
        Matcher matcher = idPattern.matcher(content);

        while (matcher.find()) {
            alarmIds.add(matcher.group(1));
        }

        String timestamp = LocalDateTime.now().format(FORMATTER);

        // Prepare new XML content with only alarm IDs and timestamp
        StringBuilder xmlBuilder = new StringBuilder();
        xmlBuilder.append("<alarms timestamp=\"").append(timestamp).append("\">\n");
        for (String id : alarmIds) {
            xmlBuilder.append("  <alarm><id>").append(id).append("</id></alarm>\n");
        }
        xmlBuilder.append("</alarms>");

        String fileName = "alarm_" + LocalDateTime.now().format(FILE_FORMATTER) + ".xml";
        Path outputPath = Paths.get(outputDir);
        Files.createDirectories(outputPath);
        Path finalFile = outputPath.resolve(fileName);
        Files.writeString(finalFile, xmlBuilder.toString());

        Map<String, Object> result = new HashMap<>();
        result.put("alarmNames", alarmIds);
        result.put("filePath", finalFile.toString());
        return result;
    }
}

